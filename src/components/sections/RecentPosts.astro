---
import type { PostCardType } from '../../types';
import { getPostsByMostRecent } from '../../utils/gqlPosts';
import PostCard from '../cards/PostCard.astro';
import IconArrowRight from '../icons/IconArrowRight.astro';
import PrimaryBtn from '../ui/PrimaryBtn.astro';
import SecondaryBtn from '../ui/SecondaryBtn.astro';

interface Props {
  orientation: 'row' | 'column';
  quantity: number;
  filteredBy: 'recent' | 'category' | 'tag'
  featuredPost?: boolean;
  showCta?: boolean;
}

const { orientation = 'row', quantity = 3, filteredBy = 'recent', showCta = false }: Props = Astro.props;

let orientationClasses = '';
let getFilteredPosts: PostCardType[] = [];

const mapPosts = (posts: any): PostCardType[] => {
  return posts.map((post: any) => ({ 
    title: post.title,
    excerpt: post.excerpt,
    uri: post.uri,
    dateGmt: post.dateGmt,
    featuredImage: post.featuredImage 
  }));
};

switch (orientation) {
  case 'row':
    orientationClasses = 'grid gap-8 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3';
    break;
  case 'column':
    orientationClasses = 'grid gap-8 grid-cols-1';
    break;
  default:
    orientationClasses = 'grid gap-8 grid-cols-1';
    break;
}

switch (filteredBy) {
  case 'recent':
    getFilteredPosts = mapPosts(await getPostsByMostRecent(quantity));
    break;
  // to do
  case 'category':
    getFilteredPosts = mapPosts(await getPostsByMostRecent(quantity));
  break;
    case 'tag':
    getFilteredPosts = mapPosts(await getPostsByMostRecent(quantity));
    break;
  default:
    orientationClasses = 'grid gap-8 grid-cols-1';
    break;
}

const posts: PostCardType[] = getFilteredPosts;
---

<section class="not-prose flex flex-col md:mb-8">

  <header class="relative flex flex-col md:flex-row justify-between mb-8 md:pr-5">
    <h2 class="p-2 md:p-0 md:mb-4 font-semibold text-2xl text-theme-800 dark:text-theme-200 border-b-2 border-theme-300 dark:border-theme-700 md:border-transparent md:dark:border-transparent">Recent Posts</h2>

    { showCta && (
      <div class="hidden md:block mt-auto">
        <SecondaryBtn
          url="/blog/"
          text="View all posts"
          icon={true}
        />
      </div>
    )}

    <div class="absolute bottom-0 -z-40 block w-full border-b-2 border-theme-300 dark:border-theme-700" aria-hidden="true"></div>
  </header>

  <ul class={`${orientationClasses}`} role="presentation">
    {
      posts.map((post) => {
        return (
          <PostCard
            featuredImage={post.featuredImage?.node.sourceUrl}
            altText={post.featuredImage?.node.altText}
            title={post.title}
            dateGmt={post.dateGmt}
            excerpt={post.excerpt.replace(/<(.|\n)*?>/g, '')}
            href={post.uri}
          />
        );
      })
    }
  </ul>

  { (showCta || orientation === 'column') && (
    <div class={ orientation === 'row' ? `py-4 md:hidden` : `py-4 md:py-8` }>
      <PrimaryBtn
        url="/blog/"
        text="View all posts"
        icon={true}
      />
    </div>
  )}

</section>
